// PC というレジスタが A, D レジスタ以外に存在している
// このレジスタは ams ファイルの命令アドレスを常に所有しており、今の実行しているプログラムのメモリアドレスを毎 step で格納している
// そのため、 D=D-A を実行しているときは PC=16 になっている (16 行目)

// A レジスタに `i` というメモリアドレスを代入する
// その後 A レジスタを参照して入ってた メモリアドレス i に、 リテラルデータ 1 を代入する
@i
M=1
@sum
M=0

(LOOP)
    @i
    D=M // D レジスタに メモリアドレス i に入っているデータを格納する
    @100 // A レジスタに 100 を入れる
    D=D-A
    
    @END // A レジスタに `END` という命令メモリのアドレスを入れる
    D;JGT // (i-100) > 0 なら END に移動する （命令データ `END` について A レジスタを介して移動している）
    
    @i
    D=M
    @sum
    M=D+M // この順番じゃないと動かない（M = M + D はだめ）
    
    @i
    M=M+1

    // A レジスタに `LOOP` という命令メモリのアドレスを入れる
    // このプログラムだと A レジスタに `12` という値が入る（LOOP がこのファイルの 12 行目であるため）
    // そのあとで JMP をもとに強引に 12 行目まで戻る（行数 = 命令アドレスという仕様になっている）
    @LOOP 
    0;JMP

(END)
    @END
    0;JMP // 無限ループ

